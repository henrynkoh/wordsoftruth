class TextNotesController < ApplicationController
  before_action :set_text_note, only: [:show, :edit, :update, :destroy, :generate_video, :upload_to_youtube]
  
  def index
    @text_notes = TextNote.recent
    @text_notes = @text_notes.by_theme(params[:theme]) if params[:theme].present?
    @text_notes = @text_notes.where(status: params[:status]) if params[:status].present?
    @text_notes = @text_notes.limit(20)
    
    @theme_counts = TextNote.group(:theme).count
    @status_counts = TextNote.group(:status).count
  end
  
  def show
    @video_ready = @text_note.completed? && @text_note.video_file_path.present?
    @youtube_ready = @text_note.youtube_video_id.present?
  end
  
  def new
    @text_note = TextNote.new
    @text_note.theme = params[:theme] if params[:theme].present?
    @text_note.note_type = params[:note_type] if params[:note_type].present?
  end
  
  def create
    @text_note = TextNote.new(text_note_params)
    
    if @text_note.save
      # Process video generation in background
      TextNoteVideoJob.perform_later(@text_note.id)
      
      redirect_to @text_note, notice: 'üìù ÌÖçÏä§Ìä∏ ÎÖ∏Ìä∏Í∞Ä Ï†ÄÏû•ÎêòÏóàÏäµÎãàÎã§. ÏòÅÏÉÅ ÏÉùÏÑ±Ïù¥ ÏãúÏûëÎê©ÎãàÎã§.'
    else
      render :new, status: :unprocessable_entity
    end
  end
  
  def edit
  end
  
  def update
    if @text_note.update(text_note_params)
      # Re-process if content changed
      if @text_note.saved_change_to_content?
        @text_note.update(status: :draft)
        TextNoteVideoJob.perform_later(@text_note.id)
      end
      
      redirect_to @text_note, notice: 'üìù ÌÖçÏä§Ìä∏ ÎÖ∏Ìä∏Í∞Ä ÏóÖÎç∞Ïù¥Ìä∏ÎêòÏóàÏäµÎãàÎã§.'
    else
      render :edit, status: :unprocessable_entity
    end
  end
  
  def destroy
    # Clean up video file if exists
    if @text_note.video_file_path.present? && File.exist?(@text_note.video_file_path)
      File.delete(@text_note.video_file_path)
    end
    
    @text_note.destroy
    redirect_to text_notes_path, notice: 'üìù ÌÖçÏä§Ìä∏ ÎÖ∏Ìä∏Í∞Ä ÏÇ≠Ï†úÎêòÏóàÏäµÎãàÎã§.'
  end
  
  def generate_video
    if @text_note.completed?
      redirect_to @text_note, alert: 'Ïù¥ÎØ∏ ÏòÅÏÉÅÏù¥ ÏÉùÏÑ±ÎêòÏóàÏäµÎãàÎã§.'
      return
    end
    
    @text_note.update(status: :processing)
    TextNoteVideoJob.perform_later(@text_note.id)
    
    redirect_to @text_note, notice: 'üé¨ ÏòÅÏÉÅ ÏÉùÏÑ±Ïù¥ ÏãúÏûëÎêòÏóàÏäµÎãàÎã§.'
  end
  
  def upload_to_youtube
    unless @text_note.completed? && @text_note.video_file_path.present?
      redirect_to @text_note, alert: 'ÏòÅÏÉÅÏùÑ Î®ºÏ†Ä ÏÉùÏÑ±Ìï¥Ïïº Ìï©ÎãàÎã§.'
      return
    end
    
    if @text_note.youtube_video_id.present?
      redirect_to @text_note, alert: 'Ïù¥ÎØ∏ YouTubeÏóê ÏóÖÎ°úÎìúÎêòÏóàÏäµÎãàÎã§.'
      return
    end
    
    YoutubeTextNoteUploadJob.perform_later(@text_note.id)
    redirect_to @text_note, notice: 'üì∫ YouTube ÏóÖÎ°úÎìúÍ∞Ä ÏãúÏûëÎêòÏóàÏäµÎãàÎã§.'
  end
  
  def quick_create
    # API endpoint for mobile quick creation
    @text_note = TextNote.new(
      content: params[:content],
      note_type: params[:note_type] || 'personal_reflection',
      theme: 'auto_detect'
    )
    
    if @text_note.save
      TextNoteVideoJob.perform_later(@text_note.id)
      
      render json: {
        success: true,
        text_note_id: @text_note.id,
        estimated_duration: @text_note.estimated_duration,
        detected_theme: @text_note.theme,
        message: 'ÏòÅÏÉÅ ÏÉùÏÑ±Ïù¥ ÏãúÏûëÎêòÏóàÏäµÎãàÎã§.'
      }
    else
      render json: {
        success: false,
        errors: @text_note.errors.full_messages
      }, status: :unprocessable_entity
    end
  end
  
  def templates
    # Provide template suggestions for different note types
    @templates = {
      personal_reflection: [
        "Ïò§Îäò ÌïòÎ£®Î•º ÎèåÏïÑÎ≥¥Î©∞ Ï£ºÎãòÍªò Í∞êÏÇ¨ÎìúÎ¶ΩÎãàÎã§...",
        "ÌïòÎÇòÎãòÏùò ÎßêÏîÄÏùÑ Î¨µÏÉÅÌïòÎ©∞...",
        "Ï£ºÎãòÍ≥ºÏùò ÏãúÍ∞ÑÏùÑ ÌÜµÌï¥ Íπ®Îã¨ÏùÄ Í≤ÉÏùÄ..."
      ],
      prayer_request: [
        "ÌïòÎÇòÎãòÍªò Í∞ÑÍµ¨Ìï©ÎãàÎã§...",
        "Ïù¥ ÏùºÏùÑ ÏúÑÌï¥ Í∏∞ÎèÑÌï©ÎãàÎã§...",
        "Ï£ºÎãòÏùò ÎèÑÏõÄÏù¥ ÌïÑÏöîÌï©ÎãàÎã§..."
      ],
      daily_devotion: [
        "Ïò§Îäò ÏïÑÏπ®, Ï£ºÎãòÍªòÏÑú Ï£ºÏã† ÏÉàÎ°úÏö¥ ÌïòÎ£®...",
        "Ï†ÄÎÖÅÏù¥ ÎêòÏñ¥ ÌïòÎ£®Î•º ÎßàÍ∞êÌïòÎ©∞...",
        "Ïò§Îäò ÌïòÎ£® Ï£ºÎãòÍ≥º Ìï®Íªò Í±∏ÏúºÎ©∞..."
      ],
      bible_study: [
        "Ïò§Îäò ÏùΩÏùÄ ÏÑ±Í≤Ω ÎßêÏîÄÏùÄ...",
        "Ïù¥ Íµ¨Ï†àÏùÑ ÌÜµÌï¥ ÌïòÎÇòÎãòÍªòÏÑú ÎßêÏîÄÌïòÏãúÎäî Í≤ÉÏùÄ...",
        "ÎßêÏîÄÏùÑ Î¨µÏÉÅÌïòÎ©∞ Íπ®Îã¨ÏùÄ Í≤ÉÏùÄ..."
      ],
      testimony: [
        "ÌïòÎÇòÎãòÏùò ÏùÄÌòúÎ•º Í∞ÑÏ¶ùÌï©ÎãàÎã§...",
        "Ï£ºÎãòÍªòÏÑú ÌñâÌïòÏã† ÎÜÄÎùºÏö¥ Ïùº...",
        "ÎØøÏùåÏùÑ ÌÜµÌï¥ Í≤ΩÌóòÌïú ÌïòÎÇòÎãòÏùò ÏÇ¨Îûë..."
      ]
    }
    
    render json: @templates
  end
  
  def theme_suggestions
    content = params[:content]
    return render json: { theme: 'golden_light' } unless content.present?
    
    # Simple theme detection for API
    theme = detect_theme_from_content(content)
    
    render json: { 
      theme: theme,
      confidence: calculate_theme_confidence(content, theme),
      alternative_themes: suggest_alternative_themes(content)
    }
  end
  
  private
  
  def set_text_note
    @text_note = TextNote.find(params[:id])
  end
  
  def text_note_params
    params.require(:text_note).permit(:title, :content, :theme, :note_type)
  end
  
  def detect_theme_from_content(content)
    return 'golden_light' unless content.present?
    
    # Theme detection logic (simplified)
    if content.match?(/Ï∞¨Ïñë|Í≤ΩÎ∞∞|Ìï†Î†êÎ£®Ïïº|ÏòÅÍ¥ë/)
      'golden_light'
    elsif content.match?(/Í∏∞ÎèÑ|Î¨µÏÉÅ|ÌèâÏïà|Í≥†Ïöî/)
      'peaceful_blue'
    elsif content.match?(/Ï†ÄÎÖÅ|Í∞êÏÇ¨|ÌïòÎ£®|ÎßàÍ∞ê/)
      'sunset_worship'
    elsif content.match?(/Ïã≠ÏûêÍ∞Ä|ÎØøÏùå|Íµ¨Ïõê|ÏÑ±Í≤Ω/)
      'cross_pattern'
    elsif content.match?(/Ìûò|Ïù∏ÎÇ¥|ÏÇ∞|Í≤¨Îîî/)
      'mountain_majesty'
    elsif content.match?(/ÏÉàÎ°úÏö¥|ÏÉùÎ™Ö|ÏÑ∏Î°Ä|Í±∞Îì≠/)
      'flowing_river'
    elsif content.match?(/Ï∂ïÎ≥µ|ÌíçÏÑ±|Í∞êÏÇ¨|Ï∂îÏàò/)
      'wheat_field'
    elsif content.match?(/Ïù∏ÎèÑ|Î™©Ïûê|Î≥¥Ìò∏|Ïñë/)
      'shepherd_field'
    elsif content.match?(/ÏòàÎ∞∞|ÏÑ±Ï†Ñ|Í±∞Î£©|Í≤ΩÎ∞∞/)
      'temple_light'
    elsif content.match?(/Ï†ÑÎèÑ|ÏÑ†Íµê|Îπõ|Ï¶ùÍ±∞/)
      'city_lights'
    else
      'golden_light'
    end
  end
  
  def calculate_theme_confidence(content, theme)
    # Simple confidence calculation
    keyword_matches = 0
    total_keywords = 0
    
    theme_keywords = {
      'golden_light' => %w[Ï∞¨Ïñë Í≤ΩÎ∞∞ Ìï†Î†êÎ£®Ïïº ÏòÅÍ¥ë Ï∞¨ÏÜ°],
      'peaceful_blue' => %w[Í∏∞ÎèÑ Î¨µÏÉÅ ÌèâÏïà Í≥†Ïöî Ï°∞Ïö©],
      'sunset_worship' => %w[Ï†ÄÎÖÅ Í∞êÏÇ¨ ÌïòÎ£® ÎßàÍ∞ê ÏÜåÎßù],
      'cross_pattern' => %w[Ïã≠ÏûêÍ∞Ä ÎØøÏùå Íµ¨Ïõê ÏÑ±Í≤Ω ÎßêÏîÄ],
      'mountain_majesty' => %w[Ìûò Ïù∏ÎÇ¥ ÏÇ∞ Í≤¨Îîî Í∞ïÌï®],
      'flowing_river' => %w[ÏÉàÎ°úÏö¥ ÏÉùÎ™Ö ÏÑ∏Î°Ä Í±∞Îì≠ ÏÉàÎ°≠],
      'wheat_field' => %w[Ï∂ïÎ≥µ ÌíçÏÑ± Í∞êÏÇ¨ Ï∂îÏàò Ïó¥Îß§],
      'shepherd_field' => %w[Ïù∏ÎèÑ Î™©Ïûê Î≥¥Ìò∏ Ïñë Ïù¥ÎÅå],
      'temple_light' => %w[ÏòàÎ∞∞ ÏÑ±Ï†Ñ Í±∞Î£© Í≤ΩÎ∞∞ ÏòàÎ∞∞],
      'city_lights' => %w[Ï†ÑÎèÑ ÏÑ†Íµê Îπõ Ï¶ùÍ±∞ Î≥µÏùå]
    }
    
    keywords = theme_keywords[theme] || []
    total_keywords = keywords.length
    keyword_matches = keywords.count { |keyword| content.include?(keyword) }
    
    return 0.5 if total_keywords == 0
    [keyword_matches.to_f / total_keywords, 1.0].min
  end
  
  def suggest_alternative_themes(content)
    themes = %w[golden_light peaceful_blue sunset_worship cross_pattern]
    themes.map do |theme|
      {
        theme: theme,
        confidence: calculate_theme_confidence(content, theme)
      }
    end.sort_by { |t| -t[:confidence] }.first(3)
  end
end